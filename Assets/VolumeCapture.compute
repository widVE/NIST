// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSClear
#pragma kernel CSClearTexture
#pragma kernel CSClearBuffer
#pragma kernel CSOctant
#pragma kernel CSTsdfGrid
#pragma kernel CSTexture
#pragma kernel CSRender
#pragma kernel CSRenderAll
//#pragma kernel CSWorldBounds
#pragma kernel CSDepthRange

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#define USE_LINEAR_FLOATS
#define USE_SINGLE_RGB_BUFFER
#define USE_RGBD_BUFFER
#define SINGLE_POINTS

RWStructuredBuffer<uint> volumeBuffer;
RWStructuredBuffer<uint> volumeColorBuffer;
RWStructuredBuffer<int> octantBuffer;
RWStructuredBuffer<uint> renderBuffer;
RWTexture2D<float4> renderTexture;

StructuredBuffer<int> cellBuffer;
StructuredBuffer<int> octantLookup;
StructuredBuffer<int> volumeLookup;
//StructuredBuffer<int> allOctantBuffer;

Texture2D<float4> colorTexture;
Texture2D<float> depthTextureX;
Texture2D<float> depthTextureY;
Texture2D<float> depthTextureZ;
//Texture2D<float> confTexture;

//SamplerState samplerconfTexture;

RWStructuredBuffer<int> rangeBuf;

uniform float4x4 camIntrinsicsInverse;
uniform float4x4 localToWorld;
uniform float4x4 viewProjMatrix;
//uniform float4x4 displayMatrix;

uniform float depthWidth;
uniform float depthHeight;
uniform uint screenWidth;
uniform uint screenHeight;
uniform float gridSizeDiag;

uniform float4 volumeBounds;
uniform float4 volumeOrigin;
uniform float4 volumeGridSize;
uniform float4 volumeGridSizeWorld;
uniform float4 volumeMin;
uniform float4 cellDimensions;
uniform float4 octantDimensions;
uniform float4 octantWorldLength;

uniform uint volumeOffset;
uniform uint numVolumes;
uniform uint totalCells;
uniform int orientation;
uniform uint depthResolution;

uniform int computeMaxEdgeSize;
uniform float4 camPos;
//uniform uint4 octantDensity;

float3 rgb2hsv(float3 c)
{
    float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
    float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-6;
    return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
 

// All components are in the range [0â€¦1], including hue.
float3 hsv2rgb(float3 c)
{
    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    float3 newVal = c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
    return newVal;
}

[numthreads(1024,1,1)]
void CSClear(uint3 id : SV_DispatchThreadID)
{
    if(volumeOffset + id.x >= totalCells * numVolumes)
    {
        return;
    }

    volumeColorBuffer[volumeOffset+id.x] = 0;

    uint mainIdx = (volumeOffset + id.x);
    uint bufIdx = (volumeOffset + id.x) / 2;

    if(mainIdx % 2 == 0)
    {
        uint vals = volumeBuffer[bufIdx] & 0xFFFF0000;
        uint oneVal = f32tof16(1.0);
        volumeBuffer[bufIdx] = vals | oneVal;
    }
    else
    {
        uint vals = volumeBuffer[bufIdx] & 0x0000FFFF;
        uint oneVal = f32tof16(1.0);
        volumeBuffer[bufIdx] = vals | (oneVal << 16);
    }
}

[numthreads(32, 32, 1)]
void CSClearTexture(uint3 id: SV_DispatchThreadID)
{
    uint maxSize = screenWidth*screenHeight*4;
    if(id.x < maxSize)
    {
        renderTexture[id.xy] = float4(1.0,1.0,1.0,1.0);
    }
}

[numthreads(1024, 1, 1)]
void CSClearBuffer(uint3 id: SV_DispatchThreadID)
{
    const uint maxSize = screenWidth*screenHeight*4;
    const uint clearMask = (uint)0xFFFFFFFF;
    if(id.x < maxSize)
    {
        renderBuffer[id.x] = clearMask;
    }
}

[numthreads(32,32,1)]
void CSOctant(uint3 gid : SV_DispatchThreadID)
{
    const int3 zeros = float3(0,0,0);
    const int3 gridSize = int3(volumeGridSize.xyz);
    const int3 compressGridSizeMinusOne = int3(gridSize.x-1, gridSize.y-1, gridSize.z-1);
    const float CONFIDENCE_THRESH = 2.0/255.0;

    float2 tCoords = float2(gid.xy);

	tCoords.y = depthHeight - tCoords.y;
	
    uint id = tCoords.y * depthWidth + tCoords.x;
    if(id >= depthResolution)
    {
        return;
    }

    octantBuffer[id] = -1;

    float dX = depthTextureX[tCoords];
	float dY = depthTextureY[tCoords];
	float dZ = depthTextureZ[tCoords];
   /*if(d <= 0.0 || d > 8.0)
    {
        return;
    }*/

    const float DEPTH_THRESH = 0.04;

    const float2 ONE_O_WH = float2(1.0, 1.0) / float2(depthWidth, depthHeight);
    //float c = confTexture.SampleLevel(samplerconfTexture, tCoords * ONE_O_WH, 0);
    //uint fourMult = id % 4;
    //uint conf = ((c >> (fourMult*8)) & 0x000000FF);
    //if(c < CONFIDENCE_THRESH)
    //{
    //    return;
    //}

    int oneConfBad = 0;
    /*int range = 2;
    for(int i = -range; i <= range && !oneConfBad; ++i)
    {
        for(int j = -range; j <= range && !oneConfBad; ++j)
        {
            float2 tc2 = ((float2(gid.x+i*8+0.5, gid.y+j*8+0.5))); // uniforms.cameraResolution;
            //float2 tc2 = tCoords + float2(i+0.5, j+0.5);
            if(tc2.x >= 0 && tc2.x < depthWidth && tc2.y >= 0 && tc2.y < depthHeight)
            {
                float conf2 = confTexture.SampleLevel(samplerconfTexture, tc2 * ONE_O_WH, 0);
                float d2 = depthTexture[tc2];
                if(conf2 < CONFIDENCE_THRESH || abs(d-d2) > DEPTH_THRESH)
                {
                    oneConfBad = 1;
                }
            }
        }
    }*/

    if(oneConfBad == 1)
    {
        return;
    }

    float4 localPoint = float4(dX, dY, dZ, 1.0);//mul(camIntrinsicsInverse, float4(tCoords, 1.0, 0.0)) * d;
    //localPoint.w = 1.0;
    float4 worldPoint = mul(localToWorld, localPoint);
    worldPoint = worldPoint / worldPoint.w;

    float3 posCell = floor(((worldPoint.xyz - volumeMin.xyz) / volumeBounds.xyz) * volumeGridSize.xyz);

    /*if(posCell.x < 0.0 || posCell.y < 0.0 || posCell.z < 0.0)
    {
        return;
    }*/

    int3 idPos = (int3)clamp((int3)posCell.xyz, zeros, compressGridSizeMinusOne);

    //this check works...
    if(idPos.x >= 0 && idPos.x < gridSize.x && idPos.y >= 0 && idPos.y < gridSize.y && idPos.z >= 0 && idPos.z < gridSize.z)
    {
        float3 worldPosCell = volumeMin.xyz + float3(idPos) * volumeGridSizeWorld.xyz + 0.5 * volumeGridSizeWorld.xyz;

        float sdf = distance(worldPoint.xyz, worldPosCell);

        //for some reason this check is never > -gridSizeDiag...
        if(sdf >= -gridSizeDiag && sdf <= gridSizeDiag)
        {
            uint3 octantIndices = idPos / uint3(cellDimensions.xyz);
            uint3 octantDensity = uint3(gridSize / cellDimensions.xyz);
            //stores world space index of which 32x16x32 octant grid
            octantBuffer[id] = octantIndices.x + octantIndices.y * octantDensity.x + octantIndices.z * octantDensity.x * octantDensity.y;
        }
    }   
}

[numthreads(32,32,1)]
void CSTsdfGrid (uint3 gid : SV_DispatchThreadID)
{
    const int3 zeros = float3(0,0,0);
    const int3 gridSize = int3(volumeGridSize.xyz);
    const int3 compressGridSizeMinusOne = int3(gridSize.x-1, gridSize.y-1, gridSize.z-1);
    
    //uint totalGridCount = (uint)volumeGridSize.x * (uint)volumeGridSize.y * (uint)volumeGridSize.z;

    float2 tCoords = float2(gid.xy);
	
	tCoords.y = depthHeight - tCoords.y;
	
    uint id = tCoords.y * depthWidth + tCoords.x;
    if(id >= depthResolution)
    {
        return;
    }

    //if no octant at point
    if(octantBuffer[id] == -1 || cellBuffer[id] == -1)
    {
        return;
    }

    float dX = depthTextureX[tCoords];
	float dY = depthTextureY[tCoords];
	float dZ = depthTextureZ[tCoords];
    /*if(d <= 0.0 || d > 8.0)
    {
        return;
    }*/

    const float CONFIDENCE_THRESH = 2.0/255.0;
    const float2 ONE_O_WH = float2(1.0, 1.0) / float2(depthWidth, depthHeight);
    /*float c = confTexture.SampleLevel(samplerconfTexture, tCoords * ONE_O_WH, 0);//[tCoords * 0.125];
    //uint fourMult = id % 4;
    //uint conf = ((c >> (fourMult*8)) & 0x000000FF);
    if(c < CONFIDENCE_THRESH)
    {
        return;
    }*/

    const float DEPTH_THRESH = 0.04;

    int oneConfBad = 0;
    /*int range = 2;
    //or if any neighbors confidence is < 2, exit...
    for(int i = -range; i <= range && !oneConfBad; ++i)
    {
        for(int j = -range; j <= range && !oneConfBad; ++j)
        {
            float2 tc2 = ((float2(gid.x+i*8+0.5, gid.y+j*8+0.5))); // uniforms.cameraResolution;
            //float2 tc2 = tCoords + float2(i+0.5, j+0.5);
            if(tc2.x >= 0 && tc2.x < depthWidth && tc2.y >= 0 && tc2.y < depthHeight)
            {
                float conf2 = confTexture.SampleLevel(samplerconfTexture, tc2 * ONE_O_WH, 0);
                float d2 = depthTexture[tc2];
                if(conf2 < CONFIDENCE_THRESH || abs(d-d2) > DEPTH_THRESH)
                {
                    oneConfBad = 1;
                }
            }
        }
    }*/
    
    if(oneConfBad == 1)
    {
        return;
    }

    float4 localPoint = float4(dX, dY, dZ, 1.0);//mul(camIntrinsicsInverse, float4(tCoords, 1.0, 0.0)) * d;
    //localPoint.w = 1.0;
    float4 worldPoint = mul(localToWorld, localPoint);
    worldPoint = worldPoint / worldPoint.w;

    float3 posCell = floor(((worldPoint.xyz - volumeMin.xyz) / volumeBounds.xyz) * volumeGridSize.xyz);

    /*if(posCell.x < 0.0 || posCell.y < 0.0 || posCell.z < 0.0)
    {
        return;
    }*/

    int3 idPos = clamp((int3)posCell.xyz, zeros, compressGridSizeMinusOne);

    //worth doing a 3-level loop here to acquire additional samples after checking against sdf?
    
    float3 worldPosCell = volumeMin.xyz + float3(idPos) * volumeGridSizeWorld.xyz + 0.5 * volumeGridSizeWorld.xyz;

    float sdf = distance(worldPoint.xyz, worldPosCell);
    //this check works...
    //if(idPos.x >= 0 && idPos.x < gridSize.x && idPos.y >= 0 && idPos.y < gridSize.y && idPos.z >= 0 && idPos.z < gridSize.z)
    if( sdf >= -gridSizeDiag && sdf <= gridSizeDiag)
    {
        uint3 cellIndices = idPos % uint3(cellDimensions.xyz);
        float tsdf = sdf;

        const uint cellXY = uint(cellDimensions.x * cellDimensions.y);
        const uint cellX = uint(cellDimensions.x);
        const uint cellXYZ = uint(cellDimensions.x * cellDimensions.y * cellDimensions.z);
        
        uint nIdx = cellIndices.x + cellX * cellIndices.y + cellXY * cellIndices.z;
        
        uint cellIdx = cellBuffer[id] * cellXYZ + nIdx;

        //if(cellIdx < totalGridCount)
        {
            float old_d = 1.0;

            uint bufIdx = cellIdx / 2;
            if(cellIdx % 2 == 0)
            {
                old_d = f16tof32((uint)volumeBuffer[bufIdx]);
            }
            else
            {
                old_d = f16tof32((uint)(volumeBuffer[bufIdx] >> 16));
            }

            uint old_r = volumeColorBuffer[cellIdx] & 0x000000FF;
            uint old_g = (volumeColorBuffer[cellIdx] >> 8) & 0x000000FF;
            uint old_b = (volumeColorBuffer[cellIdx] >> 16) & 0x000000FF;
            uint old_w = (volumeColorBuffer[cellIdx] >> 24) & 0x000000FF;

            float4 sampledColor = colorTexture[float2(gid.xy) * 0.9375];//float4(c*0.5, c*0.5, c*0.5, 1.0);//
			if(length(sampledColor) == 0)
			{
				return;
			}
			
            /*if(c == 2.0/255.0)
            {
                sampledColor = float4(0.0, 1.0, 0.0, 1.0);
            }
            else if(c == 1.0/255.0)
            {
                sampledColor = float4(1.0, 0.0, 0.0, 1.0);
            }*/
            uint sr = (uint)(sampledColor.x * 255.0);// & 0x000000FF;
            uint sg = (uint)(sampledColor.y * 255.0);// & 0x0000FF00) >> 8);
            uint sb = (uint)(sampledColor.z * 255.0);// & 0x00FF0000) >> 16);

            float w = 1.0;
            //could make w here based on angle to surface...
            float w_sum = (float)old_w + w;
            if(w_sum < 256.0)
            {
                float oneOSum = 1.0 / w_sum;

                uint v = f32tof16((old_d * old_w + tsdf * w) * oneOSum);

                if(cellIdx % 2 == 0)
                {
                    uint vals = volumeBuffer[bufIdx] & 0xFFFF0000;
                    volumeBuffer[bufIdx] = vals | v;
                }
                else
                {
                    uint vals = volumeBuffer[bufIdx] & 0x0000FFFF;
                    volumeBuffer[bufIdx] = vals | (v << 16);
                }

                uint r = (uint)(((float)old_r * old_w + sr * w) * oneOSum);
                uint g = (uint)(((float)old_g * old_w + sg * w) * oneOSum);
                uint b = (uint)(((float)old_b * old_w + sb * w) * oneOSum);

                volumeColorBuffer[cellIdx] = (r & 0x000000FF) | ((g & 0x000000FF) << 8) | ((b & 0x000000FF) << 16) | ((((uint)w_sum) & 0x000000FF) << 24);
            }
        }     
    }
}

uint convertToUint(float f)
{
#ifdef USE_LINEAR_FLOATS
    f*=0xFFFFFFFF;
    return uint(f);
#else
    return asuint(f);
#endif
}

float convertToFloat(uint i)
{
#ifdef USE_LINEAR_FLOATS
    return float(i) / float(0xFFFFFFFF);
#else
    return asfloat(i);
#endif
}

void DrawPoint(int index, uint udepth, uint3 color)
{
    if (renderBuffer[4*index+3] < udepth)
    {
        return;
    }

    InterlockedMin(renderBuffer[4*index+3], udepth);

    //now zero out the end of the depth
    udepth &= 0xFFFFFF00;

    //NOTE: we aren't checking values here.  We could do a bitwise operation to enforce 0-255

    uint r = udepth+color.r;
    uint g = udepth+color.g;
    uint b = udepth+color.b;

    InterlockedMin(renderBuffer[4*index], r);
    InterlockedMin(renderBuffer[4*index+1], g);
    InterlockedMin(renderBuffer[4*index+2], b);
}

void DrawPoint(float4 p, uint3 color)
{
    int x = p.x;
    int y = p.y;
    int index = x + y * screenWidth;        
    uint udepth = convertToUint(p.z);

    if ((p.x >= 0) && (p.x < (int)screenWidth) && (p.y >= 0) && (p.y < (int)screenHeight))
    {
        DrawPoint(index, udepth, color);
    }
}

[numthreads(32,32,1)]
void CSTexture (uint3 id : SV_DispatchThreadID)
{
    if ((id.x >= screenWidth) || (id.y >= screenHeight))
        return;

    const uint maxIndex = screenWidth * screenHeight * 4;
    uint index = id.x + id.y * screenWidth;
    if(4*index+2 > maxIndex)
    {
        return;
    }

    float3 color = float3(1.0,1.0,1.0);
    
    uint mask = (uint)0x000000FF;

    uint rb1 = renderBuffer[4*index];
    uint rb2 = renderBuffer[4*index+1];
    uint rb3 = renderBuffer[4*index+2];

    rb1 = rb1 & mask;
    rb2 = rb2 & mask;
    rb3 = rb3 & mask;
    
    color.r = ((float)rb1)/(float)255.0;
    color.g = ((float)rb2)/(float)255.0;
    color.b = ((float)rb3)/(float)255.0;
    //these lines are causing major crashes...
    //color.r = (float)((rb1 & mask))/255.0;
    //color.g = (float)((renderBuffer[4*index+1] & mask))/255.0;
    //color.b = (float)((renderBuffer[4*index+2] & mask))/255.0;
    //color.a = 1.0 - convertToFloat(renderBuffer[4*index+3]);

    //float4 cur = rgbd(id.xy);

	 renderTexture[id.xy] = float4(color, 1.0);
/*#ifdef USE_DEPTH_SHADE
     DestinationDepth[id.xy] = float4(cur.a, cur.a, cur.a, cur.a);
#endif*/
}

/*float4 rgbd(uint2 uv)
{
    uint index = uv.x + uv.y * screenWidth;
    float4 color = float4(1,1,1,1);
    if(index >= screenWidth * screenHeight)
    {
        return color;
    }
    
    color.r = (renderBuffer[4*index]& 0x000000ff)/255.0;
    color.g = (renderBuffer[4*index+1]& 0x000000ff)/255.0;
    color.b = (renderBuffer[4*index+2]& 0x000000ff)/255.0;
    color.a = 1.0 - convertToFloat(renderBuffer[4*index+3]);

    // if (isnan(color.a))
    //    color.a = 0;

    return color;
}*/
/*[numthreads(32,32,1)]
void CSWorldBounds(uint3 id : SV_DispatchThreadID)
{
    const int3 zeros = float3(0,0,0);
    const int3 gridSize = int3(volumeGridSize.xyz);
    const int3 compressGridSizeMinusOne = int3(gridSize.x-1, gridSize.y-1, gridSize.z-1);
    
    //uint totalGridCount = (uint)volumeGridSize.x * (uint)volumeGridSize.y * (uint)volumeGridSize.z;

    float2 tCoords = float2(id.xy);

    float d = depthTexture[tCoords];
    if(d < 0.0 || d > 5.0)
    {
        return;
    }

    float4 localPoint = mul(camIntrinsicsInverse, float4(tCoords, 1.0, 0.0)) * d;
    localPoint.w = 1.0;
    float4 worldPoint = mul(localToWorld, localPoint);
    worldPoint = worldPoint / worldPoint.w;

    
}
*/

[numthreads(32,32,1)]
void CSDepthRange(uint3 id : SV_DispatchThreadID)
{
   /* const int3 zeros = float3(0,0,0);
    const int3 gridSize = int3(volumeGridSize.xyz);
    const int3 compressGridSizeMinusOne = int3(gridSize.x-1, gridSize.y-1, gridSize.z-1);
    
    //uint totalGridCount = (uint)volumeGridSize.x * (uint)volumeGridSize.y * (uint)volumeGridSize.z;

    float2 tCoords = float2(id.xy);

    float d = depthTexture[tCoords];
    if(d < 0.0 || d > 5.0)
    {
        return;
    }

    int dInt = (int)(d * 1000.0);
    InterlockedMin(rangeBuf[0], dInt);
    InterlockedMax(rangeBuf[1], dInt);*/
}


float4 ProjectPoint(float4 pos)
{
    float4 p = mul(viewProjMatrix, pos);
    
    if (p.w <= 0) {
         // point is exactly on camera focus point, screen point is undefined
         // unity handles this by returning 0,0,0
         p = float4(0,0,0,0);
     } else {
         // convert x and y from clip space to window coordinates
         //NOTE: I think it looks better without the half pixel offset, but not sure why
         p.x = ((p.x/p.w + 1)*.5 * (screenWidth));
         p.y = ((p.y/p.w + 1)*.5 * (screenHeight));
         p.z = (((p.z/p.w) + 1)*.5);
        
     }
     return p;
}


struct Edge
{
    int currentIndex;
   
    
    float p0, p1;
    //x,z,u,v 
    float4 p[4];
    int yVals[4];
    float4 v0, v1, currentEdge;
    float4 delta[4];


    void init(float4 corners[8], uint4 side, int yindex, bool left)
    {

        currentIndex=1;
        int dir = left ? 1 : -1;

         //lets make two lists of indices in each direction
        float2 uvCoords[4] = {float2(0,0), float2(1,0), float2(1,1), float2(0,1)};

    //x,z,u,v 

        for (uint i = 0; i < 4; i++)
        {
            int s = (yindex + dir*i + 4) % 4;
    
            float4 c = corners[side[s]];
            float2 uv = uvCoords[s];
            p[i] = float4(c.xz, uv.xy);
            yVals[i] = (int) c.y;
        }

        delta[0] = float4(0,0,0,0);
        for (uint j=1; j < 4; j++)
        {
            if (yVals[j] >=  yVals[j-1])
                delta[j] = (p[j] - p[j-1]) * rcp((float)  (yVals[j] -  yVals[j-1]+1));
            else
                delta[j] = 1;
        }

        currentEdge = p[0];
    }

    float getP(int y, int ymin, int ymax)
    {
        if (ymax > ymin)
            return clamp((float)(y - ymin) / (float)(ymax - ymin+1), 0, 1);
        else
            return 1;
    }

    void process(int y, bool getMin)
    {
        
        if (y > yVals[currentIndex])
        {
            currentIndex++;
            if (currentIndex > 3)
            {
                 currentEdge = p[3];
                currentIndex=3;
                return;
            }
        }

        if (yVals[currentIndex] == y)
        {
            currentEdge = p[currentIndex];

        }
        else
        {
            currentEdge += delta[currentIndex];

        }

    }

    float getX(int y)
    {
        int index=1;
        //as 3 is our top number, just run this twice 
        if (yVals[index] < y)
            index++;
        if (yVals[index] < y)
            index++;

        p0 =  getP(y, yVals[index-1], yVals[index]);
        v0 = lerp(p[index - 1], p[index], p0);
       
        return v0.x;
    }  
};

struct Quad
{
    Edge e1, e2;
    int ymin, ymax;
    int xmin, xmax;
    uint yindex;

    float4 delta;
    float4 value;

    float4 corner[4];

    void init(float4 corners[8], uint4 side)
    {


        ymin = -1;
        ymax = -1;
        xmin = 100000000;
        xmax = -1;
        yindex = 0;
        for (uint i = 0; i < 4; i++)
        {
            corner[i] = corners[side[i]];
            yindex = corners[side[i]].y < corners[side[yindex]].y ? i : yindex;
            xmin = (int) (corners[side[i]].x < xmin ? corners[side[i]].x : xmin);
            xmax = (int) (corners[side[i]].x > xmax ? corners[side[i]].x : xmax);
            ymax = (int) (corners[side[i]].y > ymax ? corners[side[i]].y : ymax);
           
        }

        //now we know the ymin 
        ymin = (int) corners[side[yindex]].y;

        //edge check
       ymax =  min(ymin+computeMaxEdgeSize, ymax);

        e1.init(corners, side, yindex, true);
        e2.init(corners, side, yindex, false);
        
    }

    bool isValid(int y)
    {
        return ((y >= ymin) && (y <= ymax));

    }

  
    int2 process(int y)
    {
         e1.process(y, true);
         e2.process(y, false);

        delta = (e2.currentEdge - e1.currentEdge) * rcp(e2.currentEdge.x - e1.currentEdge.x+1);
        value = e1.currentEdge;

        int2 bounds = int2(e1.currentEdge.x, e2.currentEdge.x);

        if (bounds[1] >= screenWidth)
            bounds[1] = screenWidth-1;

        

        if (bounds[0] < 0)
        {
            value+= delta*(-bounds[0]);
            bounds[0] = value;
        }

        bounds[1] = min(bounds[0]+ computeMaxEdgeSize, bounds[1]);

         return bounds;
    }

     float4 getValue(int x)
    {
        value+= delta;
        return value;
    }
    float getBounds(int y)
    {
       return .5*(e1.getX(y)+e2.getX(y));
    }

};

void DrawQuads(float4 corners[8], uint3 color, uint4 sides[3], int numSides)
{
    //for (int i=0; i < 8; i++)
    // if ((corners[i].w <= 0) || (corners[i].z <= 0)|| (corners[i].z >= 1))
    //    return;

    for (int i=0; i<numSides; i++)
    {
        int d=0;
        for (int s=1; s < 4; s++)
        {
            int2 lD = (int2)abs((int2)corners[sides[i][s]].xy - (int2)corners[sides[i][0]].xy);
            d =  max(lD.x, d);
            d =  max(lD.y, d); 
        }
        
#ifdef SINGLE_POINTS
        if (d <= 1)
        {
#ifdef COLOR_BY_TYPE
            color=uint3(0,0,255);
#endif
             for (int s=0; s < 4; s++)
                DrawPoint(corners[sides[i][s]], color);
              
        }
        else if (d <= 2)
        {
#ifdef COLOR_BY_TYPE
            color=uint3(255,255,0);
#endif
            for (int s=0; s < 4; s++)
                DrawPoint(corners[sides[i][s]], color);

            //now do the midpoints betwen the corners
            for (int s=1; s < 4; s++)
                 DrawPoint(.5*corners[sides[i][0]] + .5*corners[sides[i][s]], color);

            //now the other two corners 
            DrawPoint(.5*corners[sides[i][2]] + .5*corners[sides[i][1]], color);
            DrawPoint(.5*corners[sides[i][2]] + .5*corners[sides[i][3]], color);
        }
        else
#endif
        {

            int2 bounds;
            Quad q;
            q.init(corners, sides[i]);
#ifdef COLOR_BY_TYPE
            color = uint3(255,0,255);
#endif
            for (int y = q.ymin; y <= q.ymax; y++)
            {
                bounds = q.process(y);
                for (int x = bounds[0]; x <= bounds[1]; x++)
                {
                    if (x >=  screenWidth)
                        break;

                    float4 value = q.getValue(x);
                    
                    float z = value.y;

#ifdef ADD_SHADING
                    float2 uv = value.zw;


                    float dcx = abs((uv.x*2.0)-1.0);
                    float dcy = abs((uv.y*2.0)-1.0);
        
                    float m = 1-.8*smoothstep(0, 1, (pow(dcx,4)+pow(dcy,4)));

                    float blendShade = (float)(bounds[1]-bounds[0]) / (.05*screenWidth);
                    m = (1.0-blendShade) + blendShade*m; 

                    m = clamp(m, 0, 1);
                   // color=m*color;

                    //color.r = 255*m;
#endif

                    int index= x + y*screenWidth;
                    
                    if ((x>= 0) && (y>=0) && (x< screenWidth) && (y < screenHeight))
                    {
#ifdef ADD_SHADING
                        DrawPoint(index, convertToUint(z), m*color);
#else
                        DrawPoint(index, convertToUint(z), color);
#endif
                    }
                }
                
            }

            
        }
    }
}

void DrawCube(float4 geo, uint3 color)
{  
   float4 corners[8];
   for (uint i=0; i <8; i++)
    {
        corners[i] = ProjectPoint(float4(geo.xyz,1) + geo.w*float4(
                    //i%2==0? -1: 1,
                    i&0x00000001 ? 1 : -1,
                    i&0x00000002 ? 1 : -1,
                    i&0x00000004 ? 1 : -1,
                   // (i/2)%2==0? -1: 1,
                   // (i/4)==0? -1 : 1,
                    0));

        if (corners[i].w <= 0)
            return;
    }

    float3 cubePos = camPos.xyz-geo.xyz;

    int2 minBounds = corners[0].xy;
    int2 maxBounds = corners[0].xy;
    for (int i=1; i<8; i++)
    {
        minBounds = min(minBounds, corners[i].xy);
        maxBounds = max(maxBounds, corners[i].xy);
    }


    if (((maxBounds.x < 0) && (maxBounds.y < 0)) || ((minBounds.x > (int)screenWidth) && (minBounds.x > (int)screenHeight)))
    {
        return;
    }

    //find the max distance
    int d = (int) max(maxBounds.x - minBounds.x, maxBounds.y - minBounds.y);

    if (d < 0)
    {
        //something is wrong
        return;
    }
    else if (d == 0)
    {
        //closest point?
        int cindex=0;
#ifdef COLOR_BY_TYPE
        color=uint3(255,0,0);
#endif
        cindex |= cubePos.z > 0 ? 4: 0;
        cindex |= cubePos.y > 0 ? 2: 0;
        cindex |= cubePos.x > 0 ? 1 :0;
        DrawPoint(corners[cindex], color);
        //DestinationColor[corners[cindex].xy] = float4(1,0,1,1);
        return;
    }
#ifdef SINGLE_POINTS
    else if (d == 1)
    {
#ifdef COLOR_BY_TYPE
        color=uint3(0,255,0);
#endif
        for (int i=0; i < 8; i++)
        {
            //DestinationColor[corners[i].xy] = float4(1,1,0,1); 
            DrawPoint(corners[i], color);
        }

        return;
    }
#endif
    else if (d < computeMaxEdgeSize)
    {
        uint4 sides[3];

        int numSides=0;
        float scale = geo.w;
        //x
        if (cubePos.x < -scale)
        {
            sides[numSides++] = uint4(0,4,6,2);
        }
        else if (cubePos.x > scale)
        {
            sides[numSides++] = uint4(5,1,3,7);
        }
    
        //y
        if (cubePos.y < -scale)
        {
            sides[numSides++] = uint4(0,1,5,4);
        }
        else if (cubePos.y > scale)
        {
            sides[numSides++] = uint4(6,7,3,2);
        }

        //z
        if (cubePos.z < -scale)
        {
            sides[numSides++] = uint4(1,0,2,3);
        }
        else if (cubePos.z > scale)
        {
            sides[numSides++] = uint4(4,5,7,6);
        }

        DrawQuads(corners, color, sides, numSides);
    }    
}


[numthreads(1024,1,1)]
void CSRender(uint3 id : SV_DispatchThreadID)
{
    //take octant buffer and volume buffers and render valid points back out into space
    const uint WRITE_THRESHOLD = 15;

    uint octantIdx = (volumeOffset + id.x) / totalCells;
    
    int octantID = octantLookup[octantIdx];

    if(octantID == -1)
    {
       return;
    }
   
    uint cellID = (volumeOffset + id.x) % totalCells;

    uint mainIdx = (uint)volumeLookup[octantIdx] * totalCells + cellID;

    uint old_w = (volumeColorBuffer[mainIdx] >> 24) & 0x000000FF;

    if(old_w < WRITE_THRESHOLD)
    {
        return;
    }

    uint bufIdx = mainIdx / 2;

    float tsdf = 0;
    if(mainIdx % 2 == 0)
    {
        tsdf = f16tof32((uint)volumeBuffer[bufIdx]);
    }
    else
    {
        tsdf = f16tof32((uint)(volumeBuffer[bufIdx] >> 16));
    }
    
    if(tsdf >= -gridSizeDiag && tsdf <= gridSizeDiag)
    {
        //if a valid tsdf value.. render this point...first calculate the world space position and project
        uint gridXY = (uint)octantDimensions.x * (uint)octantDimensions.y;
        //uint gridYZ = (uint)octantDimensions.y * (uint)octantDimensions.z;

        if(gridXY == 0)
        {
            gridXY = 1;
        }
        
        uint gridX = octantDimensions.x;
        //uint gridZ = octantDimensions.z;

        if(gridX == 0)
        {
            gridX = 1;
        }
        
        //figure out which "octant" within the overall grid, we're currently sampling from...
        uint z = octantID / gridXY;
        uint val = octantID - (z * gridXY);
        uint y = val / gridX;
        uint x = val - (y * gridX);

        float3 octantCoords = float3(float(x),float(y),float(z));
        //octantCoords = clamp(octantCoords, zeros, octantMax);
        
        float3 minBounds = volumeOrigin.xyz - (volumeBounds.xyz * 0.5) + (octantCoords.xyz * octantWorldLength.xyz);
        
        uint cellXY = (uint(cellDimensions.x) * uint(cellDimensions.y));
        uint zCell = cellID / cellXY;
        uint cellVal = cellID - (zCell * cellXY);
        uint cellX = uint(cellDimensions.x);
        uint yCell = cellVal / cellX;
        uint xCell = cellVal - (yCell * cellX);

        float3 coords = float3(xCell,yCell,zCell);

        float4 worldPos = float4(minBounds + (coords * volumeGridSizeWorld.xyz) + (0.5 * volumeGridSizeWorld.xyz), 1.0);

        float4 clipPos = mul(viewProjMatrix, worldPos);

        if(clipPos.w > 0)
        {
            clipPos /= clipPos.w;

            if(clipPos.x > -1.0 && clipPos.x < 1.0 && clipPos.y > -1.0 && clipPos.y < 1.0 && clipPos.z > -1.0 && clipPos.z < 1.0)
            {
                uint vcb = volumeColorBuffer[mainIdx];
                uint old_r = vcb & 0x000000FF;
                uint old_g = (vcb >> 8) & 0x000000FF;
                uint old_b = (vcb >> 16) & 0x000000FF;
                
                //float3 rgbCol = float3(float(old_r)/255.0, float(old_g)/255.0, float(old_b)/255.0);
                //float greyscale = dot(rgbCol, float3(.222, .707, .071));

                //float3 hsv = rgb2hsv(rgbCol);
                //hsv.y = hsv.y * saturate((float)old_w * 3.0 / 255.0);
                //float3 newRgbCol = hsv2rgb(hsv);
                //float3 newRgbCol = rgbCol;//lerp(float3(greyscale, greyscale, greyscale), rgbCol, 0.0);
                //uint3 newRGBInt = uint3(old_r, old_g, old_b);
                
                /*clipPos.xy = clamp(clipPos.xy, 0, float2(screenWidth-1, screenHeight-1));
                //int x = (int)clipPos.x;
                //int y = (int)clipPos.y;
                //int index = x + y * (int)screenWidth;        */
                
                /*clipPos = clipPos * 0.5 + 0.5;
                //clipPos.y = 1.0 - clipPos.y;
                clipPos.xy *= float2(screenWidth, screenHeight);
                uint udepth = convertToUint(clipPos.z);//1.0-clipPos.z);
                float2 tc2 = ((float2(clipPos.x, clipPos.y)));
                DrawPoint((uint)(((uint)tc2.x) + screenWidth * ((uint)tc2.y)), udepth, uint3(old_r, old_g, old_b));*/

                //DrawCube(float4(worldPos.xyz, 0.004), uint3(old_w, old_w, old_w));
                DrawCube(float4(worldPos.xyz, 0.003), uint3(old_r, old_g, old_b));
                //DrawCube(float4(worldPos.xyz, 0.003), uint3(newRgbCol.x*255.0, newRgbCol.y*255.0, newRgbCol.z*255.0));
                //DrawCube(float4(worldPos.xyz, 0.003), uint3((uint)(newRgbCol.x*255.0), (uint)(newRgbCol.y*255.0), (uint)(newRgbCol.z*255.0)));
            }
        }
    }
}

[numthreads(1024,1,1)]
void CSRenderAll(uint3 id : SV_DispatchThreadID)
{
    /*uint octantIdx = (volumeOffset + id.x) / totalCells;
    
    int octantID = allOctantBuffer[octantIdx];

    if(octantID == -1)
    {
       return;
    }
   
    uint cellID = (volumeOffset + id.x) % totalCells;

    uint mainIdx = (uint)octantID * totalCells + cellID;
    uint bufIdx = mainIdx / 2;

    float tsdf = 0;
    if(mainIdx % 2 == 0)
    {
        tsdf = f16tof32((uint)volumeBuffer[bufIdx]);
    }
    else
    {
        tsdf = f16tof32((uint)(volumeBuffer[bufIdx] >> 16));
    }
    
    if(tsdf >= -gridSizeDiag && tsdf <= gridSizeDiag)
    {
        //if a valid tsdf value.. render this point...first calculate the world space position and project
        uint gridXY = (uint)octantDimensions.x * (uint)octantDimensions.y;
        //uint gridYZ = (uint)octantDimensions.y * (uint)octantDimensions.z;

        if(gridXY == 0)
        {
            gridXY = 1;
        }
        
        uint gridX = octantDimensions.x;
        //uint gridZ = octantDimensions.z;

        if(gridX == 0)
        {
            gridX = 1;
        }
        
        //figure out which "octant" within the overall grid, we're currently sampling from...
        uint z = octantID / gridXY;
        uint val = octantID - (z * gridXY);
        uint y = val / gridX;
        uint x = val - (y * gridX);

        float3 octantCoords = float3(float(x),float(y),float(z));
        //octantCoords = clamp(octantCoords, zeros, octantMax);
        
        float3 minBounds = volumeOrigin.xyz - (volumeBounds.xyz * 0.5) + (octantCoords.xyz * octantWorldLength.xyz);
        
        uint cellXY = (uint(cellDimensions.x) * uint(cellDimensions.y));
        uint zCell = cellID / cellXY;
        uint cellVal = cellID - (zCell * cellXY);
        uint cellX = uint(cellDimensions.x);
        uint yCell = cellVal / cellX;
        uint xCell = cellVal - (yCell * cellX);

        float3 coords = float3(xCell,yCell,zCell);

        float4 worldPos = float4(minBounds + (coords * volumeGridSizeWorld.xyz) + (0.5 * volumeGridSizeWorld.xyz), 1.0);

        float4 clipPos = mul(viewProjMatrix, worldPos);

        if(clipPos.w > 0)
        {
            clipPos /= clipPos.w;

            if(clipPos.x > -1.0 && clipPos.x < 1.0 && clipPos.y > -1.0 && clipPos.y < 1.0 && clipPos.z > -1.0 && clipPos.z < 1.0)
            {
                clipPos = clipPos * 0.5 + 0.5;
                
                //clipPos.y = 1.0 - clipPos.y;

                clipPos.xy *= float2(screenWidth, screenHeight);

                //clipPos.xy = clamp(clipPos.xy, 0, float2(screenWidth-1, screenHeight-1));

                uint old_r = volumeColorBuffer[mainIdx] & 0x000000FF;
                uint old_g = (volumeColorBuffer[mainIdx] >> 8) & 0x000000FF;
                uint old_b = (volumeColorBuffer[mainIdx] >> 16) & 0x000000FF;
                uint old_w = (volumeColorBuffer[mainIdx] >> 24) & 0x000000FF;

                //int x = (int)clipPos.x;
                //int y = (int)clipPos.y;
                //int index = x + y * (int)screenWidth;        
                
                uint udepth = convertToUint(clipPos.z);//1.0-clipPos.z);
                
                if(old_w > 1)
                {
                    //float2 tc2 = ((float2(clipPos.x, clipPos.y)));
                    //DrawPoint((uint)(((uint)tc2.x) + screenWidth * ((uint)tc2.y)), udepth, uint3(old_r, old_g, old_b));
                    DrawCube(float4(worldPos.xyz, 0.002), uint3(old_r, old_g, old_b));
                }
            }
        }
    }*/
}