//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Markers"",
            ""id"": ""041cd856-59ca-48eb-b105-4529e474f7dc"",
            ""actions"": [
                {
                    ""name"": ""PlaceMarker"",
                    ""type"": ""Button"",
                    ""id"": ""bc5bebb5-1eed-403a-8cec-d0cc1737eb7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cddc7853-12ff-414b-9554-1982ab192060"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceMarker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Photo"",
            ""id"": ""1c6f3349-506a-4d31-801e-4faa8496d189"",
            ""actions"": [
                {
                    ""name"": ""TakePhoto"",
                    ""type"": ""Button"",
                    ""id"": ""59ae0182-a4f4-4065-a3ac-e0f4ecf8870a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""883119c3-8ee7-4283-b4f4-e3bb313342ff"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakePhoto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""1d16105a-d490-46d0-b575-ba910e8dfe5b"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""a216017b-0acd-42c0-80ab-bc7a6b1cd72f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fdf7fd9-db6d-4f75-9877-082620913334"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Markers
        m_Markers = asset.FindActionMap("Markers", throwIfNotFound: true);
        m_Markers_PlaceMarker = m_Markers.FindAction("PlaceMarker", throwIfNotFound: true);
        // Photo
        m_Photo = asset.FindActionMap("Photo", throwIfNotFound: true);
        m_Photo_TakePhoto = m_Photo.FindAction("TakePhoto", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_Toggle = m_Map.FindAction("Toggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Markers
    private readonly InputActionMap m_Markers;
    private IMarkersActions m_MarkersActionsCallbackInterface;
    private readonly InputAction m_Markers_PlaceMarker;
    public struct MarkersActions
    {
        private @InputActions m_Wrapper;
        public MarkersActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceMarker => m_Wrapper.m_Markers_PlaceMarker;
        public InputActionMap Get() { return m_Wrapper.m_Markers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MarkersActions set) { return set.Get(); }
        public void SetCallbacks(IMarkersActions instance)
        {
            if (m_Wrapper.m_MarkersActionsCallbackInterface != null)
            {
                @PlaceMarker.started -= m_Wrapper.m_MarkersActionsCallbackInterface.OnPlaceMarker;
                @PlaceMarker.performed -= m_Wrapper.m_MarkersActionsCallbackInterface.OnPlaceMarker;
                @PlaceMarker.canceled -= m_Wrapper.m_MarkersActionsCallbackInterface.OnPlaceMarker;
            }
            m_Wrapper.m_MarkersActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceMarker.started += instance.OnPlaceMarker;
                @PlaceMarker.performed += instance.OnPlaceMarker;
                @PlaceMarker.canceled += instance.OnPlaceMarker;
            }
        }
    }
    public MarkersActions @Markers => new MarkersActions(this);

    // Photo
    private readonly InputActionMap m_Photo;
    private IPhotoActions m_PhotoActionsCallbackInterface;
    private readonly InputAction m_Photo_TakePhoto;
    public struct PhotoActions
    {
        private @InputActions m_Wrapper;
        public PhotoActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TakePhoto => m_Wrapper.m_Photo_TakePhoto;
        public InputActionMap Get() { return m_Wrapper.m_Photo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhotoActions set) { return set.Get(); }
        public void SetCallbacks(IPhotoActions instance)
        {
            if (m_Wrapper.m_PhotoActionsCallbackInterface != null)
            {
                @TakePhoto.started -= m_Wrapper.m_PhotoActionsCallbackInterface.OnTakePhoto;
                @TakePhoto.performed -= m_Wrapper.m_PhotoActionsCallbackInterface.OnTakePhoto;
                @TakePhoto.canceled -= m_Wrapper.m_PhotoActionsCallbackInterface.OnTakePhoto;
            }
            m_Wrapper.m_PhotoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TakePhoto.started += instance.OnTakePhoto;
                @TakePhoto.performed += instance.OnTakePhoto;
                @TakePhoto.canceled += instance.OnTakePhoto;
            }
        }
    }
    public PhotoActions @Photo => new PhotoActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_Toggle;
    public struct MapActions
    {
        private @InputActions m_Wrapper;
        public MapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_Map_Toggle;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @Toggle.started -= m_Wrapper.m_MapActionsCallbackInterface.OnToggle;
                @Toggle.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnToggle;
                @Toggle.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnToggle;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Toggle.started += instance.OnToggle;
                @Toggle.performed += instance.OnToggle;
                @Toggle.canceled += instance.OnToggle;
            }
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IMarkersActions
    {
        void OnPlaceMarker(InputAction.CallbackContext context);
    }
    public interface IPhotoActions
    {
        void OnTakePhoto(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnToggle(InputAction.CallbackContext context);
    }
}
