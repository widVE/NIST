//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Markers"",
            ""id"": ""041cd856-59ca-48eb-b105-4529e474f7dc"",
            ""actions"": [
                {
                    ""name"": ""PlaceMarker"",
                    ""type"": ""Button"",
                    ""id"": ""bc5bebb5-1eed-403a-8cec-d0cc1737eb7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cddc7853-12ff-414b-9554-1982ab192060"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceMarker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Photo"",
            ""id"": ""1c6f3349-506a-4d31-801e-4faa8496d189"",
            ""actions"": [
                {
                    ""name"": ""TakePhoto"",
                    ""type"": ""Button"",
                    ""id"": ""59ae0182-a4f4-4065-a3ac-e0f4ecf8870a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""883119c3-8ee7-4283-b4f4-e3bb313342ff"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakePhoto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""1d16105a-d490-46d0-b575-ba910e8dfe5b"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""a216017b-0acd-42c0-80ab-bc7a6b1cd72f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fdf7fd9-db6d-4f75-9877-082620913334"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HandMenu"",
            ""id"": ""f336398c-7db0-48b9-87be-1e3f0073ef56"",
            ""actions"": [
                {
                    ""name"": ""Activate Menu"",
                    ""type"": ""Button"",
                    ""id"": ""bd288543-7c49-4f5f-bd18-5a0e530b20fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f898dd0e-4774-4353-b788-1dca8792be4b"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Markers
        m_Markers = asset.FindActionMap("Markers", throwIfNotFound: true);
        m_Markers_PlaceMarker = m_Markers.FindAction("PlaceMarker", throwIfNotFound: true);
        // Photo
        m_Photo = asset.FindActionMap("Photo", throwIfNotFound: true);
        m_Photo_TakePhoto = m_Photo.FindAction("TakePhoto", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_Toggle = m_Map.FindAction("Toggle", throwIfNotFound: true);
        // HandMenu
        m_HandMenu = asset.FindActionMap("HandMenu", throwIfNotFound: true);
        m_HandMenu_ActivateMenu = m_HandMenu.FindAction("Activate Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Markers
    private readonly InputActionMap m_Markers;
    private List<IMarkersActions> m_MarkersActionsCallbackInterfaces = new List<IMarkersActions>();
    private readonly InputAction m_Markers_PlaceMarker;
    public struct MarkersActions
    {
        private @InputActions m_Wrapper;
        public MarkersActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceMarker => m_Wrapper.m_Markers_PlaceMarker;
        public InputActionMap Get() { return m_Wrapper.m_Markers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MarkersActions set) { return set.Get(); }
        public void AddCallbacks(IMarkersActions instance)
        {
            if (instance == null || m_Wrapper.m_MarkersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MarkersActionsCallbackInterfaces.Add(instance);
            @PlaceMarker.started += instance.OnPlaceMarker;
            @PlaceMarker.performed += instance.OnPlaceMarker;
            @PlaceMarker.canceled += instance.OnPlaceMarker;
        }

        private void UnregisterCallbacks(IMarkersActions instance)
        {
            @PlaceMarker.started -= instance.OnPlaceMarker;
            @PlaceMarker.performed -= instance.OnPlaceMarker;
            @PlaceMarker.canceled -= instance.OnPlaceMarker;
        }

        public void RemoveCallbacks(IMarkersActions instance)
        {
            if (m_Wrapper.m_MarkersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMarkersActions instance)
        {
            foreach (var item in m_Wrapper.m_MarkersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MarkersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MarkersActions @Markers => new MarkersActions(this);

    // Photo
    private readonly InputActionMap m_Photo;
    private List<IPhotoActions> m_PhotoActionsCallbackInterfaces = new List<IPhotoActions>();
    private readonly InputAction m_Photo_TakePhoto;
    public struct PhotoActions
    {
        private @InputActions m_Wrapper;
        public PhotoActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TakePhoto => m_Wrapper.m_Photo_TakePhoto;
        public InputActionMap Get() { return m_Wrapper.m_Photo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhotoActions set) { return set.Get(); }
        public void AddCallbacks(IPhotoActions instance)
        {
            if (instance == null || m_Wrapper.m_PhotoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PhotoActionsCallbackInterfaces.Add(instance);
            @TakePhoto.started += instance.OnTakePhoto;
            @TakePhoto.performed += instance.OnTakePhoto;
            @TakePhoto.canceled += instance.OnTakePhoto;
        }

        private void UnregisterCallbacks(IPhotoActions instance)
        {
            @TakePhoto.started -= instance.OnTakePhoto;
            @TakePhoto.performed -= instance.OnTakePhoto;
            @TakePhoto.canceled -= instance.OnTakePhoto;
        }

        public void RemoveCallbacks(IPhotoActions instance)
        {
            if (m_Wrapper.m_PhotoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPhotoActions instance)
        {
            foreach (var item in m_Wrapper.m_PhotoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PhotoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PhotoActions @Photo => new PhotoActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private List<IMapActions> m_MapActionsCallbackInterfaces = new List<IMapActions>();
    private readonly InputAction m_Map_Toggle;
    public struct MapActions
    {
        private @InputActions m_Wrapper;
        public MapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_Map_Toggle;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void AddCallbacks(IMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapActionsCallbackInterfaces.Add(instance);
            @Toggle.started += instance.OnToggle;
            @Toggle.performed += instance.OnToggle;
            @Toggle.canceled += instance.OnToggle;
        }

        private void UnregisterCallbacks(IMapActions instance)
        {
            @Toggle.started -= instance.OnToggle;
            @Toggle.performed -= instance.OnToggle;
            @Toggle.canceled -= instance.OnToggle;
        }

        public void RemoveCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapActions @Map => new MapActions(this);

    // HandMenu
    private readonly InputActionMap m_HandMenu;
    private List<IHandMenuActions> m_HandMenuActionsCallbackInterfaces = new List<IHandMenuActions>();
    private readonly InputAction m_HandMenu_ActivateMenu;
    public struct HandMenuActions
    {
        private @InputActions m_Wrapper;
        public HandMenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateMenu => m_Wrapper.m_HandMenu_ActivateMenu;
        public InputActionMap Get() { return m_Wrapper.m_HandMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandMenuActions set) { return set.Get(); }
        public void AddCallbacks(IHandMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_HandMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandMenuActionsCallbackInterfaces.Add(instance);
            @ActivateMenu.started += instance.OnActivateMenu;
            @ActivateMenu.performed += instance.OnActivateMenu;
            @ActivateMenu.canceled += instance.OnActivateMenu;
        }

        private void UnregisterCallbacks(IHandMenuActions instance)
        {
            @ActivateMenu.started -= instance.OnActivateMenu;
            @ActivateMenu.performed -= instance.OnActivateMenu;
            @ActivateMenu.canceled -= instance.OnActivateMenu;
        }

        public void RemoveCallbacks(IHandMenuActions instance)
        {
            if (m_Wrapper.m_HandMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHandMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_HandMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HandMenuActions @HandMenu => new HandMenuActions(this);
    public interface IMarkersActions
    {
        void OnPlaceMarker(InputAction.CallbackContext context);
    }
    public interface IPhotoActions
    {
        void OnTakePhoto(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnToggle(InputAction.CallbackContext context);
    }
    public interface IHandMenuActions
    {
        void OnActivateMenu(InputAction.CallbackContext context);
    }
}
